#include <stdio.h>
#include <ctype.h>
#define MAX 100  
struct stack {
    int top;
    char arr[MAX];  
};
void initStack(struct stack* s) {
    s->top = -1;
}
int isEmpty(struct stack* s) {
    return s->top == -1;
}
int isFull(struct stack* s) {
    return s->top == MAX - 1;  
}
void push(struct stack* s, char c) {
    if (!isFull(s)) {
        s->arr[++(s->top)] = c;
    } else {
        printf("Stack overflow\n");
    }
}
char pop(struct stack* s) {
    if (!isEmpty(s)) {
        return s->arr[(s->top)--];
    }
    return '\0';  
}
char peek(struct stack* s) {
    if (!isEmpty(s)) {
        return s->arr[s->top];
    }
    return '\0'; 
}
int precedence(char c) {
    if (c == '*' || c == '/') {
        return 2;
    } else if (c == '+' || c == '-') {
        return 1;
    } else {
        return 0;
    }
}
int isOperator(char c) {
    return c == '+' || c == '-' || c == '*' || c == '/';
}
void infixToPostfix(char* infix) {
    struct stack s;  
    initStack(&s);  
    char postfix[MAX];
    int i = 0, k = 0;
    while (infix[i] != '\0') {
        if (isalnum(infix[i])) {
            postfix[k++] = infix[i];
        } else if (infix[i] == '(') {
            push(&s, infix[i]);
        } else if (infix[i] == ')') {
            while (!isEmpty(&s) && peek(&s) != '(') {
                postfix[k++] = pop(&s);
            }
            pop(&s);  
        } else if (isOperator(infix[i])) {
            while (!isEmpty(&s) && precedence(peek(&s)) >= precedence(infix[i])) {
                postfix[k++] = pop(&s);
            }
            push(&s, infix[i]);
        }
        i++;
    }
    while (!isEmpty(&s)) {
        postfix[k++] = pop(&s);
    }
    postfix[k] = '\0';
    printf("Postfix Expression: %s\n", postfix);
}
int main() {
    char infix[MAX];
    printf("Enter a valid parenthesized infix expression: ");
    scanf("%s", infix);
    infixToPostfix(infix);
    return 0;
}




OUTPUT:
Enter a valid parenthesized infix expression: (A+B)/C*D
Postfix Expression: AB+C/D*


=== Code Execution Successful ===
