REVERSE:
#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *next;
};
struct node *head=NULL;
void reverse()
{
    struct node *prevnode,*currentnode,*nextnode;
    prevnode=0;
    currentnode=nextnode=head;
   while(nextnode!=NULL)
   {
       nextnode=nextnode->next;
       currentnode->next=prevnode;
       prevnode=currentnode;
       currentnode=nextnode;

   }
   head=prevnode;
}

void displaylist()
{
    struct node *temp;
    temp=head;
    while(temp!=NULL)
    {
        printf("%d ->",temp->data);
        temp=temp->next;
    }
    printf("NULL\n");
}
void push(int x)
{
    struct node *newnode;
    newnode=(struct node*)malloc(sizeof(struct node));
    newnode->data=x;
    newnode->next=head;
    head=newnode;
}
int main()
{
    push(20);
    push(30);
    push(40);
    printf("original list:");
    displaylist();
    reverse();
    printf("reversed list:");
    displaylist();
}

OUTPUT:
original list:40 ->30 ->20 ->NULL
reversed list:20 ->30 ->40 ->NULL

CONCAT:
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void concat(struct Node** head, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;

    new_node->data = data;
    new_node->next = NULL;

    if (*head == NULL) {
        *head = new_node;
    } else {
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
}

void display(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void concatenate(struct Node** list1, struct Node** list2) {
    if (*list1 == NULL) {
        *list1 = *list2;
        return;
    }

    struct Node* last = *list1;
    while (last->next != NULL) {
        last = last->next;
    }

    last->next = *list2;
}

int main() {
    struct Node* list1 = NULL;
    struct Node* list2 = NULL;
    
    concat(&list1, 10);
    concat(&list1, 20);
    concat(&list1, 30);
    
    concat(&list2, 40);
    concat(&list2, 50);
    concat(&list2, 60);
    
    printf("Original list1:\n");
    display(list1);
    
    printf("Original list2:\n");
    display(list2);
    
    concatenate(&list1, &list2);
    
    printf("Concatenated list1 and list2:\n");
    display(list1);
    
    return 0;
}
OUTPUT:
Original list1:
10 -> 20 -> 30 -> NULL
Original list2:
40 -> 50 -> 60 -> NULL
Concatenated list1 and list2:
10 -> 20 -> 30 -> 40 -> 50 -> 60 -> NULL

SORT:
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void insert(struct Node** head, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;
    new_node->data = data;
    new_node->next = NULL;
    
    if (*head == NULL) {
        *head = new_node;
    } else {
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
}

void display(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

void sort(struct Node* head) {
    struct Node* i;
    struct Node* j;
    int temp;
    for (i = head; i != NULL; i = i->next) {
        for (j = i->next; j != NULL; j = j->next) {
            if (i->data > j->data) {
                temp = i->data;
                i->data = j->data;
                j->data = temp;
            }
        }
    }
}

int main() {
    struct Node* list = NULL;
    
    insert(&list, 30);
    insert(&list, 10);
    insert(&list, 50);
    insert(&list, 20);
    insert(&list, 40);
    
    printf("Original list:\n");
    display(list);
    
    sort(list);
    
    printf("Sorted list:\n");
    display(list);
    
    return 0;
}
OUTPUT:
Original list:
30 -> 10 -> 50 -> 20 -> 40 -> NULL
Sorted list:
10 -> 20 -> 30 -> 40 -> 50 -> NULL

STACK AND QUEUE OPERATIONS:
#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

void push(struct Node** top, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = *top;
    *top = new_node;
}

int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack is empty!\n");
        return -1;
    }
    struct Node* temp = *top;
    int popped_data = temp->data;
    *top = (*top)->next;
    free(temp);
    return popped_data;
}

int peek_stack(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return -1;
    }
    return top->data;
}

void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    new_node->data = data;
    new_node->next = NULL;
    if (*rear == NULL) {
        *front = *rear = new_node;
        return;
    }
    (*rear)->next = new_node;
    *rear = new_node;
}

int dequeue(struct Node** front, struct Node** rear) {
    if (*front == NULL) {
        printf("Queue is empty!\n");
        return -1;
    }
    struct Node* temp = *front;
    int dequeued_data = temp->data;
    *front = (*front)->next;
    if (*front == NULL) {
        *rear = NULL;
    }
    free(temp);
    return dequeued_data;
}

int peek_queue(struct Node* front) {
    if (front == NULL) {
        printf("Queue is empty!\n");
        return -1;
    }
    return front->data;
}

void display(struct Node* head) {
    struct Node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* stack_top = NULL;
    struct Node* queue_front = NULL;
    struct Node* queue_rear = NULL;
    
    printf("Stack Operations:\n");
    push(&stack_top, 10);
    push(&stack_top, 20);
    push(&stack_top, 30);
    printf("Top element of stack: %d\n", peek_stack(stack_top));
    printf("Popped element from stack: %d\n", pop(&stack_top));
    printf("Top element after pop: %d\n", peek_stack(stack_top));
    
    printf("\nQueue Operations:\n");
    enqueue(&queue_front, &queue_rear, 10);
    enqueue(&queue_front, &queue_rear, 20);
    enqueue(&queue_front, &queue_rear, 30);
    printf("Front element of queue: %d\n", peek_queue(queue_front));
    printf("Dequeued element from queue: %d\n", dequeue(&queue_front, &queue_rear));
    printf("Front element after dequeue: %d\n", peek_queue(queue_front));

    return 0;
}
OUTPUT:
Stack Operations:
Top element of stack: 30
Popped element from stack: 30
Top element after pop: 20

Queue Operations:
Front element of queue: 10
Dequeued element from queue: 10
Front element after dequeue: 20
