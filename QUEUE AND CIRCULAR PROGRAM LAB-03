1.
#include <stdio.h>
#define MAX 5 
int queue[MAX];
int front = -1, rear = -1;

void insert() {
    int value;
    if (rear == MAX - 1) {
        printf("Queue Overflow! Cannot insert element.\n");
    } else {
        printf("Enter the value to be inserted: ");
        scanf("%d", &value);
        if (front == -1) {
            front = 0; 
        }
        rear++;
        queue[rear] = value;
        printf("Inserted %d into the queue.\n", value);
    }
}
void delete() {
    if (front == -1 || front > rear) {
        printf("Queue Underflow! Cannot delete element.\n");
    } else {
        printf("Deleted %d from the queue.\n", queue[front]);
        front++;
        if (front > rear) {
            front = rear = -1;  
        }
    }
}
void display() {
    if (front == -1) {
        printf("Queue is empty!\n");
    } else {
        printf("Queue elements are: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

int main() {
    int choice;
    while (1) {
        printf("\nQueue Operations Menu:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        
        switch (choice) {
            case 1: insert();
                    break;
            case 2: delete();
                    break;
            case 3: display();
                    break;
            case 4: return 0;
            default: printf("Invalid choice! Please try again.\n");
        }
    }
}



2.
#include <stdio.h>
#define MAX 4 // Maximum size of the circular queue

typedef struct {
    int items[MAX];
    int front;
    int rear;
} CircularQueue;

// Function to initialize the circular queue
void initializeQueue(CircularQueue *q) {
    q->front = -1;
    q->rear = -1;
}

// Function to check if the queue is full
int isFull(CircularQueue *q) {
    return (q->front == (q->rear + 1) % MAX);
}

// Function to check if the queue is empty
int isEmpty(CircularQueue *q) {
    return (q->front == -1);
}

// Function to add an element to the queue
void enqueue(CircularQueue *q, int value) {
    if (isFull(q)) {
        printf("Queue Overflow: Cannot insert %d. The queue is full.\n", value);
    } else {
        if (q->front == -1) {
            q->front = 0; // Initialize front if this is the first element
        }
        q->rear = (q->rear + 1) % MAX; // Move rear circularly
        q->items[q->rear] = value;
        printf("Inserted %d into the queue.\n", value);
    }
}

// Function to remove an element from the queue
void dequeue(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("Queue Underflow: Cannot delete. The queue is empty.\n");
    } else {
        printf("Deleted %d from the queue.\n", q->items[q->front]);
        if (q->front == q->rear) {
            // Queue is empty after this operation
            q->front = -1;
            q->rear = -1;
        } else {
            q->front = (q->front + 1) % MAX; // Move front circularly
        }
    }
}

// Function to display the queue
void display(CircularQueue *q) {
    if (isEmpty(q)) {
        printf("The queue is empty.\n");
    } else {
        printf("Queue elements: ");
        for (int i = q->front; ; i = (i + 1) % MAX) {
            printf("%d ", q->items[i]);
            if (i == q->rear) break; // Exit when we reach the rear
        }
        printf("\n");
    }
}

int main() {
    CircularQueue q;
    initializeQueue(&q);
   
    display(&q);
    enqueue(&q, 10);
    enqueue(&q, 20);
    enqueue(&q, 30);
    display(&q);
   
    dequeue(&q);
    display(&q);
   
    enqueue(&q, 40);
    enqueue(&q, 50);
    enqueue(&q, 60); // This should trigger overflow
    display(&q);

    return 0;
}
